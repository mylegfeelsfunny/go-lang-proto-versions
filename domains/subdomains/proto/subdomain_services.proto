syntax = "proto3";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "google/protobuf/field_mask.proto";

import "subdomain_types.proto";

package subdomains.v1;

// These annotations are used when generating the OpenAPI file.
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Domain/v1/Subdomain";
    version: "1.0";
  };
  external_docs: {
    url: "https://github.com/StashInvest/px-proto/domains/subdomains/v1";
    description: "px-subdomains";
  };
  schemes: [HTTP,HTTPS];
  security_definitions: {
    security: {
      key: "Bearer"
      value: {
        type: TYPE_API_KEY
        in: IN_HEADER
        name: "Authorization"
        description: "Bearer token: <token>"
      }
    }
  }
  security: {
    security_requirement: {
      key: "Bearer"
    }
  }
  responses: {
    key: "ErrorMessageResponse";
    value: {
      description: "Error Message Response with optional details. Details are for the customer. CxCode is optional and can be forwarded from customer to agent.";
      schema: {
        json_schema: {ref: ".subdomains.v1.ErrorMessageResponse"}
      }
    }
  }
  responses: {
    key: "ErrorResponse";
    value: {
      description: "Default Error Response. Message and code are developer centric and not for customer communication.";
      schema: {
        json_schema: {ref: ".subdomains.v1.ErrorResponse"}
      }
    }
  }
};

service Subdomains {
  rpc GetSubdomain(GetSubdomainRequest) returns (GetSubdomainResponse){
    option (google.api.http) = {
      get: "/customers/users/{userId}/v1/subdomains"

    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get Subdomain"
      description: "Get list of user subdomains"
      tags: "subdomain"
      responses: {
        key: "200",
        value: {
          description: "A successful response";
          schema: {
            json_schema: {ref: ".subdomains.v1.GetSubdomainResponse"}
          }
        }
      };
    };
  };
}
