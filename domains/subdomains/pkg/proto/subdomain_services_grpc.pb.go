// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: subdomain_services.proto

package subdomainsv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Subdomains_GetSubdomain_FullMethodName = "/subdomains.v1.Subdomains/GetSubdomain"
)

// SubdomainsClient is the client API for Subdomains service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubdomainsClient interface {
	GetSubdomain(ctx context.Context, in *GetSubdomainRequest, opts ...grpc.CallOption) (*GetSubdomainResponse, error)
}

type subdomainsClient struct {
	cc grpc.ClientConnInterface
}

func NewSubdomainsClient(cc grpc.ClientConnInterface) SubdomainsClient {
	return &subdomainsClient{cc}
}

func (c *subdomainsClient) GetSubdomain(ctx context.Context, in *GetSubdomainRequest, opts ...grpc.CallOption) (*GetSubdomainResponse, error) {
	out := new(GetSubdomainResponse)
	err := c.cc.Invoke(ctx, Subdomains_GetSubdomain_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubdomainsServer is the server API for Subdomains service.
// All implementations should embed UnimplementedSubdomainsServer
// for forward compatibility
type SubdomainsServer interface {
	GetSubdomain(context.Context, *GetSubdomainRequest) (*GetSubdomainResponse, error)
}

// UnimplementedSubdomainsServer should be embedded to have forward compatible implementations.
type UnimplementedSubdomainsServer struct {
}

func (UnimplementedSubdomainsServer) GetSubdomain(context.Context, *GetSubdomainRequest) (*GetSubdomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubdomain not implemented")
}

// UnsafeSubdomainsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubdomainsServer will
// result in compilation errors.
type UnsafeSubdomainsServer interface {
	mustEmbedUnimplementedSubdomainsServer()
}

func RegisterSubdomainsServer(s grpc.ServiceRegistrar, srv SubdomainsServer) {
	s.RegisterService(&Subdomains_ServiceDesc, srv)
}

func _Subdomains_GetSubdomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubdomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubdomainsServer).GetSubdomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Subdomains_GetSubdomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubdomainsServer).GetSubdomain(ctx, req.(*GetSubdomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Subdomains_ServiceDesc is the grpc.ServiceDesc for Subdomains service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Subdomains_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "subdomains.v1.Subdomains",
	HandlerType: (*SubdomainsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSubdomain",
			Handler:    _Subdomains_GetSubdomain_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "subdomain_services.proto",
}
